import os
import requests
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from IPython.display import Markdown, display
from openai import OpenAI


###BORROWED CODE FOR NOW###
#

# A class to represent a Webpage
#
# # Some websites need you to use proper headers when fetching them:
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
}

class Website:
    def __init__(self, url):
# Create this Website object from the given url using the BeautifulSoup library
        self.url = url
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.content, 'html.parser')
        self.title = soup.title.string if soup.title else "No title found"
        for irrelevant in soup.body(["script", "style", "img", "input"]):
            irrelevant.decompose()
        self.text = soup.body.get_text(separator="\n", strip=True)
###########################

load_dotenv(override=True)
api_key = os.getenv('OPENAI_API_KEY')
openai = OpenAI()
website = Website('https://yle.fi')

# Step 1: #Create your prompts
system_prompt = "you are a language teacher"
user_prompt = f"Find all finnish verbs in the text and give me their list together with their translation into English - {website.text}"

# Step 2: Make the messages list
messages = [
    {"role":"system","content":system_prompt},
    {"role":"user","content":user_prompt}           
] 

# Step 3: Call OpenAI
def list_of_verbs(url):
    response = openai.chat.completions.create(
        model = "gpt-4o-mini",
        messages = messages
    )
    return response.choices[0].message.content

# Step 4: print the result
print(list_of_verbs('https://yle.fi'))

# next steps
# create a method that takes in
# 	just one url 
# 	a language into which the translation should be done
# 		test websites in different languages, it is able to recognise finnish no problem
# 	"verbs" could also be a variable and could be replace with other word classes, maybe even strings? - it is supposed to be a vocab builder
# use all parametres to create the prompts
# next step could be to oprionally override the model
# revamp the output to show the languages as a header
#
